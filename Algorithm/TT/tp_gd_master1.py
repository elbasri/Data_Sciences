# -*- coding: utf-8 -*-
"""TP_GD_Master1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17MKp8GHoeiq86a4sgUiPJvj3ZEGYlnLG
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv('dataset.csv',sep=";",header=None)

df.head()

df.columns = ['x0','x1','y']
df.head(20)

df.info()

"""## Gradient $\theta_0$"""

def dJ0(m,t0,t1):
    s = 0
    for i in range(m):
        s += ((t0*df.x0[i] +t1*df.x1[i])-df.y[i])*df.x0[i]
    return s/m

dJ0(50,0.2,0.9)

"""## Gradient $\theta_1$"""

def dJ1(m,t0,t1):
    s = 0
    for i in range(m):
        s += ((t0*df.x0[i] +t1*df.x1[i])-df.y[i])*df.x1[i]
    return s/m

dJ1(50,0.2,0.9)

def MSE(t0,t1,m):
    mse = 0
    for i in range(m):
        mse += (t0+ t1*df.x1[i]- df.y[i])**2
    return mse/m

"""## Gradient descent"""

alpha, t0, t1 = 0.0002, 1, 2
nbrIteration = 200
m=50
mse_list=[]
for i in range(nbrIteration):
    t0 = t0 - alpha*dJ0(m,t0,t1)
    t1 = t1 - alpha*dJ1(m,t0,t1)
    mse_list.append(MSE(t0,t1,m))
(t0,t1)

plt.plot(np.arange(nbrIteration),mse_list)
plt.grid()

model = lambda x: t0 + t1*x

plt.scatter(df.x1,df.y,c="g",marker="+")
plt.title("Nuages des points avec droite de r√©gression")
plt.plot(df.x1.values,model(df.x1.values))
plt.grid()

type(df.x1.values)

y_prediction = model(df.x1.values)

plt.scatter(df.y,y_prediction)
plt.grid()

